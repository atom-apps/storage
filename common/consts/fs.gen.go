// Code generated by go-enum DO NOT EDIT.
// Version: -
// Revision: -
// Build Date: -
// Built By: -

package consts

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// FilesystemFile is a Filesystem of type file.
	FilesystemFile Filesystem = "file"
	// FilesystemDir is a Filesystem of type dir.
	FilesystemDir Filesystem = "dir"
)

var ErrInvalidFilesystem = fmt.Errorf("not a valid Filesystem, try [%s]", strings.Join(_FilesystemNames, ", "))

var _FilesystemNames = []string{
	string(FilesystemFile),
	string(FilesystemDir),
}

// FilesystemNames returns a list of possible string values of Filesystem.
func FilesystemNames() []string {
	tmp := make([]string, len(_FilesystemNames))
	copy(tmp, _FilesystemNames)
	return tmp
}

// FilesystemValues returns a list of the values for Filesystem
func FilesystemValues() []Filesystem {
	return []Filesystem{
		FilesystemFile,
		FilesystemDir,
	}
}

// String implements the Stringer interface.
func (x Filesystem) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Filesystem) IsValid() bool {
	_, err := ParseFilesystem(string(x))
	return err == nil
}

var _FilesystemValue = map[string]Filesystem{
	"file": FilesystemFile,
	"dir":  FilesystemDir,
}

// ParseFilesystem attempts to convert a string to a Filesystem.
func ParseFilesystem(name string) (Filesystem, error) {
	if x, ok := _FilesystemValue[name]; ok {
		return x, nil
	}
	return Filesystem(""), fmt.Errorf("%s is %w", name, ErrInvalidFilesystem)
}

var errFilesystemNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Filesystem) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Filesystem("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseFilesystem(v)
	case []byte:
		*x, err = ParseFilesystem(string(v))
	case Filesystem:
		*x = v
	case *Filesystem:
		if v == nil {
			return errFilesystemNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errFilesystemNilPtr
		}
		*x, err = ParseFilesystem(*v)
	default:
		return errors.New("invalid type for Filesystem")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Filesystem) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *Filesystem) Set(val string) error {
	v, err := ParseFilesystem(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Filesystem) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Filesystem) Type() string {
	return "Filesystem"
}

type NullFilesystem struct {
	Filesystem Filesystem
	Valid      bool
}

func NewNullFilesystem(val interface{}) (x NullFilesystem) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullFilesystem) Scan(value interface{}) (err error) {
	if value == nil {
		x.Filesystem, x.Valid = Filesystem(""), false
		return
	}

	err = x.Filesystem.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullFilesystem) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return string(x.Filesystem), nil
}

type NullFilesystemStr struct {
	NullFilesystem
}

func NewNullFilesystemStr(val interface{}) (x NullFilesystemStr) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Value implements the driver Valuer interface.
func (x NullFilesystemStr) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.Filesystem.String(), nil
}
